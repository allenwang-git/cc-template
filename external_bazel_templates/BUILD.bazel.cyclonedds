"""
Template for @cyclonedds//:BUILD.bazel
"""

load("@rules_foreign_cc//foreign_cc:defs.bzl", "cmake")

filegroup(
    name = "srcs",
    srcs = glob(["**"]),
)

cmake(
    name = "cyclonedds",
    build_args = [
        "--target install",
        "-j `nproc`",
    ],
    cache_entries = {
        # For a faster build
        "BUILD_EXAMPLES": "OFF",
        "BUILD_TESTING": "OFF",
        "BUILD_IDLC_XTESTS": "OFF",
        "BUILD_DDSPERF": "OFF",
        "ENABLE_SSL": "OFF",
        "ENABLE_SECURITY": "OFF",
        "WITH_FREERTOS": "OFF",
        "WITH_LWIP": "OFF",

        # For features
        "ENABLE_TYPELIB": "ON",
        "ENABLE_TYPE_DISCOVERY": "ON",
        "ENABLE_TOPIC_DISCOVERY": "ON",
        "BUILD_IDLC": "ON",
        "ENABLE_DEADLINE_MISSED": "ON",
        "ENABLE_LIFESPAN": "ON",
        "ENABLE_NETWORK_PARTITIONS": "ON",
        # Note that when using QNX, this multicast feature must be off
        "ENABLE_SOURCE_SPECIFIC_MULTICAST": "ON",
        "CMAKE_BUILD_TYPE": "Release",
        "CMAKE_POSITION_INDEPENDENT_CODE": "ON",

        # Need to disable this in CMAKE_C*_FLAGS to avoid the flag being ignored
        # from copts when it is already set by clang17 toolchain (and then
        # overridden with .bazelrc).
        "CMAKE_CXX_FLAGS": "-Wno-builtin-macro-redefined",
        "CMAKE_C_FLAGS": "-Wno-builtin-macro-redefined",

        # by default disable iceoryx
        "ENABLE_ICEORYX": "OFF",
    } | select({
        "@platforms//cpu:x86_64": {
            "CMAKE_SYSTEM_PROCESSOR": "x86_64",
        },
        "@platforms//cpu:aarch64": {
            "CMAKE_SYSTEM_PROCESSOR": "aarch64",
        },
    }) | select({
        "@platforms//os:linux": {
            "CMAKE_SYSTEM_NAME": "Linux",
        },
    }),
    # Use `copts` rather than `CMAKE_C*_FLAGS` for those flags to be able to
    # use select and set different flags for different compilers
    copts =  [
        "-Wno-error",
        "-w",
    ],
    generate_args = ["-GNinja"],
    lib_source = ":srcs",
    out_bin_dir = "bin",
    out_binaries = [
        "idlc",
    ],
    out_data_dirs = [
        "lib",
        "lib/cmake",
        "lib/pkgconfig",
    ],
    out_shared_libs = [
        "libddsc.so",
        "libddsc.so.0",
        "libddsc.so.0.11.0",
    ],
    visibility = ["//visibility:public"],
    deps = [],
)
